{"ast":null,"code":"var _jsxFileName = \"/home/stefan/repos/memory-card/src/App.js\";\nimport React from 'react';\nimport Scoreboard from './components/scoreboard';\nimport Card from './components/card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCallback = childData => {\n      if (this.state.isOver === true) {\n        console.log(\"It is really over\");\n      } //checks if the game is over\n\n\n      this.checkGame(); //saved the card if\n\n      this.setState({\n        cardId: childData\n      }); //records the clicked cards\n\n      this.setState({\n        clicks: [...this.state.clicks, childData]\n      });\n      console.log(this.state.clicks); //generate random cards\n\n      setTimeout(this.getCards(), 500);\n    };\n\n    this.state = {\n      cards: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],\n      cardsUI: [],\n      id: 0,\n      cardId: 0,\n      clicks: [],\n      highScore: 0,\n      score: 0,\n      status: \"Click on a card\",\n      isOver: false\n    };\n    this.getCards = this.getCards.bind(this);\n    this.handleCallback = this.handleCallback.bind(this);\n    this.checkGame = this.checkGame.bind(this);\n  }\n\n  //the function will randomise cards array on button click\n  getCards() {\n    let array = this.state.cards;\n    let i = 9;\n\n    for (; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n\n    let uis = []; //creates cards in a random order and then pushes them in an array\n\n    array.forEach(item => {\n      uis.push( /*#__PURE__*/_jsxDEV(Card, {\n        id: item,\n        checkGame: this.checkGame,\n        parentCallback: this.handleCallback,\n        data: this.state.cardId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 14\n      }, this));\n    });\n    this.setState({\n      cardsUI: uis\n    });\n  }\n\n  checkGame() {\n    //regex that check if there are at least 2 digits that are the same\n    let regex = /([0-9]).*?\\1/; //join the array elements so it can be checked with regex\n\n    let hits = this.state.clicks.join(''); //game over if the test is true and updates highscore with current score, or just increment the current score by 1 if it is false\n\n    if (regex.test(hits) === true) {\n      this.setState({\n        status: 'Game over!'\n      });\n      this.setState({\n        highScore: this.state.score\n      });\n      this.setState({\n        score: 0,\n        isOver: true\n      });\n    } else {\n      this.setState({\n        score: this.state.score + 1\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: this.getCards,\n          children: \"Shuffle cards\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"status\",\n          children: this.state.status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(Scoreboard, {\n          score: this.state.score,\n          highScore: this.state.highScore\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 4\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cardsContainer\",\n        children: this.state.cardsUI\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["React","Scoreboard","Card","App","Component","constructor","props","handleCallback","childData","state","isOver","console","log","checkGame","setState","cardId","clicks","setTimeout","getCards","cards","cardsUI","id","highScore","score","status","bind","array","i","j","Math","floor","random","temp","uis","forEach","item","push","regex","hits","join","test","render"],"sources":["/home/stefan/repos/memory-card/src/App.js"],"sourcesContent":["import React from 'react';\nimport Scoreboard from './components/scoreboard'\nimport Card from './components/card'\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      cards: [0,1,2,3,4,5,6,7,8,9],\n      cardsUI: [],\n      id: 0,\n      cardId: 0,\n      clicks: [],\n      highScore: 0,\n      score: 0,\n      status: \"Click on a card\",\n      isOver: false\n    }\n    this.getCards = this.getCards.bind(this)\n    this.handleCallback = this.handleCallback.bind(this)\n    this.checkGame = this.checkGame.bind(this)\n  }\n  \n  \n\n  handleCallback = (childData) =>{\n    if(this.state.isOver===true){\n      console.log(\"It is really over\")\n    }\n    //checks if the game is over\n    this.checkGame()\n    //saved the card if\n    this.setState({cardId: childData})\n    //records the clicked cards\n    this.setState({clicks: [...this.state.clicks, childData]})\n    console.log(this.state.clicks)\n    //generate random cards\n    setTimeout(this.getCards(),500)\n    \n\n  }\n//the function will randomise cards array on button click\n  getCards(){\n    let array = this.state.cards\n    let i = 9;\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n\n  let uis = [];\n  //creates cards in a random order and then pushes them in an array\n  array.forEach((item)=>{\n    uis.push(<Card id={item} checkGame={this.checkGame} parentCallback = {this.handleCallback} data={this.state.cardId}/>)\n  })\n  this.setState({cardsUI: uis})\n\n\n  \n  }\n   checkGame(){\n     //regex that check if there are at least 2 digits that are the same\n    let regex = /([0-9]).*?\\1/\n    //join the array elements so it can be checked with regex\n    let hits = this.state.clicks.join('')\n    //game over if the test is true and updates highscore with current score, or just increment the current score by 1 if it is false\n    if(regex.test(hits)===true){\n      this.setState({status: 'Game over!'})\n      this.setState({highScore: this.state.score})\n      this.setState({score: 0, isOver: true})\n    }else {\n      this.setState({score: this.state.score+1})\n    }\n    \n   }\n\n\n\n\n  render(){\n return(\n   <div className='content'>\n   <div className='header'>\n  <button type='button' onClick={this.getCards}>Shuffle cards</button>\n  <div className='status'>{this.state.status}</div>\n   <Scoreboard score={this.state.score} highScore={this.state.highScore} />\n   </div>\n   <div className='cardsContainer'>\n    {this.state.cardsUI}\n   </div>\n   \n   </div>\n )}\n}\n\n\n\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}