{"ast":null,"code":"var _jsxFileName = \"/home/stefan/repos/memory-card/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Scoreboard from './components/scoreboard';\nimport Card from './components/card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [cards, setCards] = useState([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n  const [cardsUI, setCardsUI] = useState([]);\n  const [cardId, setCardId] = useState(0);\n  const [clicks, setClicks] = useState([]);\n  const [highScore, setHighScore] = useState(0);\n  const [score, setScore] = useState(0);\n  const [status, setStatus] = useState('Click on a card');\n  const [isOver, setIsOver] = useState(false);\n  const [word, setWord] = useState('Parent');\n  const [id, setId] = useState(word);\n\n  const handleClick = (id, event) => {\n    console.log(\"handleClick ran successfuly\"); //checks if the game is over\n\n    checkGame(id); //saved the card if\n\n    setCardId(id);\n    setClicks([...clicks, id]); //generate random cards\n\n    getCards();\n  }; //the function will randomise cards array on button click\n\n\n  const getCards = () => {\n    let array = cards;\n    let i = 9;\n\n    for (; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n\n    let uis = []; //creates cards in a random order and then pushes them in an array\n\n    array.forEach(item => {\n      uis.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"2\",\n        className: \"cardContainer\",\n        onClick: handleClick,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          changeWord: word => setWord(word),\n          id: item,\n          checkGame: checkGame\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 74\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 14\n      }, this));\n    });\n    setCardsUI(uis);\n  };\n\n  const checkGame = childData => {\n    //regex that check if there are at least 2 digits that are the same\n    let regex = /([0-9]).*?\\1/; //join the array elements so it can be checked with regex\n\n    let hits = clicks.join('');\n    console.log(hits, clicks); //game over if the test is true and updates highscore with current score, or just increment the current score by 1 if it is false\n\n    if (regex.test(hits) === true) {\n      setStatus('Game over!');\n      setHighScore(score);\n      setScore(0);\n      setClicks(0);\n    } else {\n      setScore(score + 1);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [word, /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: getCards,\n        children: \"Shuffle cards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status\",\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(Scoreboard, {\n        score: score,\n        highScore: highScore\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cardsContainer\",\n      children: cardsUI\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 4\n  }, this);\n}\n\n_s(App, \"gmHkYzb0jxVNGoRebwDCgATvFtM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Scoreboard","Card","App","cards","setCards","cardsUI","setCardsUI","cardId","setCardId","clicks","setClicks","highScore","setHighScore","score","setScore","status","setStatus","isOver","setIsOver","word","setWord","id","setId","handleClick","event","console","log","checkGame","getCards","array","i","j","Math","floor","random","temp","uis","forEach","item","push","childData","regex","hits","join","test"],"sources":["/home/stefan/repos/memory-card/src/App.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport Scoreboard from './components/scoreboard'\nimport Card from './components/card'\n\nfunction App () {\n    const [cards,setCards] = useState([0,1,2,3,4,5,6,7,8,9])\n    const [cardsUI, setCardsUI] = useState([])\n    const [cardId, setCardId] = useState(0)\n    const [clicks, setClicks] = useState([])\n    const [highScore, setHighScore] = useState(0)\n    const [score ,setScore] = useState(0)\n    const [status, setStatus] = useState('Click on a card')\n    const [isOver, setIsOver] = useState(false)\n    const [word, setWord] = useState('Parent')\n    const [id,setId] = useState(word)\n    \n  \n  \n  \n\n  const handleClick = (id,event) =>{\n    console.log(\"handleClick ran successfuly\")\n    //checks if the game is over\n    checkGame(id)\n    //saved the card if\n    setCardId(id)\n    setClicks([...clicks,id])\n    //generate random cards\n    getCards()\n    \n\n  }\n//the function will randomise cards array on button click\n  const getCards=()=>{\n    let array = cards\n    let i = 9;\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n\n  let uis = [];\n  //creates cards in a random order and then pushes them in an array\n  array.forEach((item)=>{\n    uis.push(<div id='2' className='cardContainer' onClick={handleClick}><Card  changeWord={word=>setWord(word)} id={item} checkGame={checkGame}/></div>)\n  })\n  setCardsUI(uis)\n\n\n  \n  }\n   const checkGame=(childData)=>{\n \n     //regex that check if there are at least 2 digits that are the same\n    let regex = /([0-9]).*?\\1/\n    //join the array elements so it can be checked with regex\n    let hits =clicks.join('')\n    console.log(hits,clicks)\n    //game over if the test is true and updates highscore with current score, or just increment the current score by 1 if it is false\n    if(regex.test(hits)===true){\n      setStatus('Game over!')\n      setHighScore(score)\n      setScore(0)\n      setClicks(0)\n    \n    }else {\n      setScore(score+1)\n    }\n    \n   }\n\n\n\n\n return(\n   <div className='content'>\n   <div className='header'>\n {word}\n  <button type='button' onClick={getCards}>Shuffle cards</button>\n  <div className='status'>{status}</div>\n   <Scoreboard score={score} highScore={highScore} />\n   </div>\n   <div className='cardsContainer'>\n    {cardsUI}\n   </div>\n   \n   </div>\n )}\n\n\n\n\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}